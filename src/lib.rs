
extern crate bytes;


pub trait UorbMsgMeta {
    const ENCODED_LEN: usize;
    const MSG_HASH_CODE: u16;
    const MSG_RAW_NAME: &'static str;

}

//#[derive(Debug, PartialEq, Clone, Default)]
//pub struct UorbMessage {
//    pub hash: u32,
//    pub name: String,
//    pub description: Option<String>,
//    pub fields: Vec<Uorb>,
//}



// import code generated by parser at build time
pub mod common {
    use crate::UorbMsgMeta;
    use bytes::{Buf, BufMut, Bytes, IntoBuf};

    include!(concat!(env!("OUT_DIR"), "/common.rs"));
}



#[derive(Debug, Clone)]
pub struct UorbHeader {
    pub version: u8,
    /// unique hash of the msg name
    pub hash: u16,
    /// the "instance" of the sensor/entity that sent this
    pub instance_id: u8,
    /// length of the payload in bytes
    pub payload_len: u16,
}


// microRTPS uses:
// * [>,>,>,topic_ID,seq,payload_length_H,payload_length_L,CRCHigh,CRCLow,payloadStart, ... ,payloadEnd]


/// Utilities for sending and receiving uORB via a reliable transport
pub mod wireline {
/*
HOWTO transmit/receive uORB
hash the uorb message name to get the hash_val

    _sendbuf[0] = (hash_val >> 8) & 0xFF;
    _sendbuf[1] = hash_val & 0xFF;
    _sendbuf[2] = instance_id; //the "instance" of the sensor /entity that sent this
    _sendbuf[3] = (payload_len >> 8) & 0xFF;
    _sendbuf[4] = payload_len & 0xFF;
    followed by payload data...
*/

}




